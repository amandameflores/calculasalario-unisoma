package br.amandaflores.unisoma.calculasalario.controllers;

import java.util.Optional;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import br.amandaflores.unisoma.calculasalario.model.entities.Client;
import br.amandaflores.unisoma.calculasalario.model.entities.ClientResponse;
import br.amandaflores.unisoma.calculasalario.model.repository.ClientRepository;

@RestController
@RequestMapping("/api/v1/clients")
public class ClientController {

	@Autowired
	private ClientRepository clientRepository;
	
	@GetMapping
	public ResponseEntity<Iterable<Client>> getClients() {
	     Iterable<Client> data = clientRepository.findAll();
	    return new ResponseEntity<>(data, HttpStatus.OK);
	}
	
	@PostMapping(produces="application/json")
	public ResponseEntity<ClientResponse> createClient(@Valid @RequestBody Client client) {
	    Optional<Client> cpf = clientRepository.findClientByCpf(client.getCpf());
	    Optional<Client> email = clientRepository.findClientByEmail(client.getEmail());
	    ClientResponse response = new ClientResponse();
	    if(cpf.isPresent() || email.isPresent()){
	        if (cpf.isPresent() && email.isPresent()) {
	            response.setMessage("E-mail is required and must be unique. " +
	                    "CPF is required and must be unique");
	        } else if(email.isPresent()) {
	            response.setMessage("CPF is required and must be unique");
	        } else {
	            response.setMessage("E-mail is required and must be unique.");
	        }
	        return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
	    }
	    else{
	         @Valid
			Client newClient = clientRepository.save(client);
	        response.setClient(newClient);
	        response.setMessage("Success");
	        return new ResponseEntity<>(response, HttpStatus.CREATED);
	    }
	}
	
	@PutMapping(path = "/{id}")
	public ResponseEntity<ClientResponse> updateClient(@RequestBody Client client, @PathVariable int id) {
	    boolean data = clientRepository.existsById(id);
	    ClientResponse response = new ClientResponse();
	    if(data){
	        client.setId(id);
	        clientRepository.save(client);
	        response.setClient(client);
	        response.setMessage("Success");
	        return new ResponseEntity<>(response, HttpStatus.OK);
	    }else{
	        response.setMessage("Client id: "+id+" cannot be found");
	        return new ResponseEntity<>(response, HttpStatus.NO_CONTENT);
	    }
	}
	
	@GetMapping(path = "/{id}")
	public ResponseEntity<ClientResponse> getClientById(@PathVariable int id) {
	    Optional<Client> client = clientRepository.findById(id);
	    ClientResponse response = new ClientResponse();
	    if(client.isPresent()){
	        response.setClient(client.get());
	        response.setMessage("Success");
	        return new ResponseEntity<>(response, HttpStatus.OK);
	    }
	    response.setMessage("Client id: "+id+" cannot be found");
	    return new ResponseEntity<>(response, HttpStatus.NO_CONTENT);
	}
	
	@DeleteMapping(path = "/{id}")
	public ResponseEntity<ClientResponse> deleteClient(@PathVariable int id) {
	    Optional<Client> data = clientRepository.findById(id);
	    ClientResponse response = new ClientResponse();
	    if(data.isPresent()){
	        clientRepository.delete(data.get());
	        response.setMessage("Client deleted");
	        return new ResponseEntity<>(response, HttpStatus.OK);
	    }
	    response.setMessage("Client id: "+id+" cannot be found");
	    return new ResponseEntity<>(response, HttpStatus.NO_CONTENT);
	}
	
	
}
